services:
  cartservice:
    build:
      dockerfile: CartService/Dockerfile
      context: .
    ports:
      - "7010:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:7070;
      - RedisConfig__ConnectionString=valkey
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    develop:
      watch:
        - path: /CartService/appsettings.Development.json
          action: sync+restart
          target: /CartService/appsettings.Development.json
        - path: /CartService
          target: /app
          action: rebuild


  imageservice:
    build:
      dockerfile: ImageService/Dockerfile
      context: .
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDb__HostAddress=mongodb://mongodb
      - ASPNETCORE_URLS=http://+:8080;https://+:7070;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    ports:
      - "5271:8080"
    depends_on:
      - mongodb
    develop:
      watch:
        - path: /ImageService/appsettings.Development.json
          action: sync+restart
          target: /ImageService/appsettings.Development.json
        - path: /ImageService
          action: rebuild

  orderservice:
    build:
      dockerfile: OrderService/Dockerfile
      context: .
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MQConfig__HostAddress=rabbitmq
      - ConnectionStrings__Host=Server=sqlserver;
      - ConnectionStrings__User=user=orderManager;
      - ConnectionStrings__Password=password=totallynotamangerpassword!@#$5;
      - MongoDb__HostAddress=mongodb://mongodb
      - ASPNETCORE_URLS=http://+:8080;https://+:7070;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    ports:
      - "5138:8080"
    depends_on:
      - rabbitmq
      - sqlserver
      - mongodb
    develop:
      watch:
      - path: /OrderService/appsettings.Development.json
        action: sync+restart
        target: /OrderService/appsettings.Development.json
      - path: /OrderService
        action: rebuild

  identityservice:
    build:
      dockerfile: IdentityService/Dockerfile
      context: .
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Host=Server=sqlserver;
      - ConnectionStrings__User=user=identityManager;
      - ConnectionStrings__Password=password=totallynotamangerpassword!@#$5;
      - ASPNETCORE_URLS=http://+:8080;https://+:7070;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    ports:
      - "5156:8080"
    depends_on:
      - sqlserver
    develop:
      watch:
        - path: /IdentityService/appsettings.Development.json
          action: sync+restart
          target: /IdentityService/appsettings.Development.json
        - path: /IdentityService
          action: rebuild

  ocelotservice:
    build:
      dockerfile: OcelotGateway/Dockerfile
      context: .
    environment:
      - ASPNETCORE_ENVIRONMENT=docker
      - ASPNETCORE_URLS=http://+:8080;
    ports:
      - "5044:8080"
    develop:
      watch:
        - path: /OcelotGateway
          action: rebuild

  productservice:
    build:
      dockerfile: ProductService/Dockerfile
      context: .
    ports:
      - "7107:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MQConfig__HostAddress=rabbitmq
      - ConnectionStrings__Host=Server=sqlserver;
      - ConnectionStrings__User=user=productManager;
      - ConnectionStrings__Password=password=totallynotamangerpassword!@#$5;
      - ASPNETCORE_URLS=http://+:8080;https://+:7070;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    develop:
      watch:
        - path: /ProductService/appsettings.Development.json
          action: sync+restart
          target: /ProductService/appsettings.Development.json
        - path: /ProductService
          action: rebuild

    depends_on:
      rabbitmq:
        condition: service_started
      mongodb:
        condition: service_started
      sqlserver:
        condition: service_started

  rabbitmq:
    image: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 1
  sqlserver:
    build:
      dockerfile: sqlserver.Dockerfile
      context: .
      secrets:
        - sqlpassword
    environment:
      MSSQL_SA_PASSWORD_FILE: /run/secrets/sqlpassword
      ACCEPT_EULA: "Y"

    ports:
      - "1434:1433"
    secrets:
      - sqlpassword

  mongodb:
    image: mongo:7.0.9
    ports:
      - "27017:27017"
    # environment:

  valkey:
    image: valkey/valkey:7.2.5
    ports:
      - "6379:6379"

  otel-lgtm:
    image: grafana/otel-lgtm:0.11.2
    ports:
      - "4317:4317"
      - "4318:4318"
      - "3000:3000"
      - "9090:9090"
      - "3100:3100"

secrets:
  sqlpassword:
    file: sqlpassword.txt
