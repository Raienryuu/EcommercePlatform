// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductService;

#nullable disable

namespace ProductService.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductService.Models.Delivery", b =>
                {
                    b.Property<Guid>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DeliveryId");

                    b.ToTable("Deliveries", (string)null);

                    b.HasData(
                        new
                        {
                            DeliveryId = new Guid("4e627d51-4510-4567-aee6-3830a25e040c"),
                            DeliveryType = "DeliveryPoint",
                            HandlerName = "dhl",
                            Name = "DHL Parcel Locker",
                            PaymentType = "Online",
                            Price = 0m
                        },
                        new
                        {
                            DeliveryId = new Guid("dd6b0c88-538a-4ea2-877b-6143fab14ca5"),
                            DeliveryType = "DirectCustomerAddress",
                            HandlerName = "dhl",
                            Name = "Standard shipping",
                            PaymentType = "Online",
                            Price = 9m
                        },
                        new
                        {
                            DeliveryId = new Guid("8c68b176-1401-4373-aed8-3bad2f7c0f29"),
                            DeliveryType = "DirectCustomerAddress",
                            HandlerName = "dhl",
                            Name = "Premium shipping",
                            PaymentType = "Online",
                            Price = 18m
                        },
                        new
                        {
                            DeliveryId = new Guid("b532c6c3-0696-4536-98a5-f1dcdf4df954"),
                            DeliveryType = "DirectCustomerAddress",
                            HandlerName = "dhl",
                            Name = "Standard shipping (cash)",
                            PaymentType = "Cash",
                            Price = 20m
                        });
                });

            modelBuilder.Entity("ProductService.Models.OrderReserved", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReserveTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("OrdersReserved", (string)null);
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Price");

                    b.HasIndex("Quantity");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87817c15-d25f-4621-9135-2e7851b484b3"),
                            CategoryId = 2,
                            ConcurrencyStamp = 0,
                            Description = "White mug",
                            Name = "Mug",
                            Price = 10m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("22ea176b-ea99-445f-97b3-c1afa5585562"),
                            CategoryId = 3,
                            ConcurrencyStamp = 0,
                            Description = "White cup",
                            Name = "Cpu",
                            Price = 10m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("f12e47a0-82f9-4231-abce-63280e7d3d99"),
                            CategoryId = 4,
                            ConcurrencyStamp = 0,
                            Description = "Apple laptop",
                            Name = "MacBook Air M2",
                            Price = 1000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("d8f65542-f0e7-4ca7-b9c1-002898cdc379"),
                            CategoryId = 4,
                            ConcurrencyStamp = 0,
                            Description = "Apple laptop",
                            Name = "Lenovo ThindPad E14",
                            Price = 1000m,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("ProductService.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Mugs"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tableware"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Cups"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Laptops"
                        });
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.HasOne("ProductService.Models.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductService.Models.ProductCategory", b =>
                {
                    b.HasOne("ProductService.Models.ProductCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
